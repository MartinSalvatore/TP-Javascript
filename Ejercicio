// Cada producto que vende el super es creado con esta clase
class Producto {
    constructor(sku, nombre, precio, categoria, stock = 10) {
        this.sku = sku;
        this.nombre = nombre;
        this.categoria = categoria;
        this.precio = precio;
        this.stock = stock;
    }
}

// Creo todos los productos que vende mi super
const queso = new Producto('KS944RUR', 'Queso', 10, 'lacteos', 4);
const gaseosa = new Producto('FN312PPE', 'Gaseosa', 5, 'bebidas');
const cerveza = new Producto('PV332MJ', 'Cerveza', 20, 'bebidas');
const arroz = new Producto('XX92LKI', 'Arroz', 7, 'alimentos', 20);
const fideos = new Producto('UI999TY', 'Fideos', 5, 'alimentos');
const lavandina = new Producto('RT324GD', 'Lavandina', 9, 'limpieza');
const shampoo = new Producto('OL883YE', 'Shampoo', 3, 'higiene', 50);
const jabon = new Producto('WE328NJ', 'Jabon', 4, 'higiene', 3);

// Genero un listado de productos. Simulando base de datos
const productosDelSuper = [queso, gaseosa, cerveza, arroz, fideos, lavandina, shampoo, jabon];

// Cada cliente que venga a mi super va a crear un carrito
class Carrito {
    constructor() {
        this.precioTotal = 0;
        this.productos = [];
        this.categorias = [];
    }

    /**
     * Función que agrega @{cantidad} de productos con @{sku} al carrito
     */
    async agregarProducto(sku, cantidad) {
        console.log(`Agregando ${cantidad} ${sku}`);

        try {
            // Busco el producto en la "base de datos"
            const producto = await findProductBySku(sku);

            console.log("Producto encontrado", producto);

            // Verificar si el producto ya está en el carrito
            const productoEnCarrito = this.productos.find(item => item.sku === sku);

            if (productoEnCarrito) {
                // Si el producto ya está en el carrito, se suma la cantidad
                productoEnCarrito.cantidad += cantidad;
            } else {
                // Si el producto no está en el carrito, se agrega como nuevo producto
                const nuevoProducto = new ProductoEnCarrito(sku, producto.nombre, cantidad);
                this.productos.push(nuevoProducto);
            }

            // Actualizar la lista de categorías solamente si la categoría no estaba en la lista
            if (!this.categorias.includes(producto.categoria)) {
                this.categorias.push(producto.categoria);
            }

            this.precioTotal += producto.precio * cantidad;
        } catch (error) {
            console.error(error);
        }
    }

  /**
 * Función que elimina @{cantidad} de productos con @{sku} del carrito
 * Retorna una promesa
 */
eliminarProducto(sku, cantidad) {
    return new Promise((resolve, reject) => {
        const productoEnCarrito = this.productos.find(item => item.sku === sku);

        if (!productoEnCarrito) {
            reject(`Product ${sku} not found in the cart`);
        } else {
            if (cantidad < productoEnCarrito.cantidad) {
                productoEnCarrito.cantidad -= cantidad;
                this.precioTotal -= productoEnCarrito.precio * cantidad;
            } else {
                const productoIndex = this.productos.findIndex(item => item.sku === sku);
                this.productos.splice(productoIndex, 1);
                this.precioTotal -= productoEnCarrito.precio * productoEnCarrito.cantidad;
            }
            resolve();
        }
    });
}

